<?php
/**
 * Test the rule evaluator service.
 *
 * @since   1.18
 * @license GPLv2
 */

use Mockery as m;

/**
 * Class IT_Exchange_Membership_Rule_Evaluator_Service_Test
 *
 * We need to cover:
 *  - logged out user
 *      - no rules
 *      - rules
 *      - single rule with exemption
 *      - multiple rules with 1 exemption
 *  - logged in user w/ 1 membership
 *      - 1 rule matching => true
 *      - 1 rule non-matching => false
 */
class IT_Exchange_Membership_Rule_Evaluator_Service_Test extends IT_Exchange_UnitTestCase {

	private function get_mock_rule() {

		static $count = 0;

		$rule = $this->getMock( 'IT_Exchange_Membership_Content_Rule' );
		$rule->method( 'get_rule_id' )->willReturn( "id-{$count}" );

		$count ++;

		return $rule;
	}

	/**
	 * Teardown the test case.
	 */
	function tearDown() {
		parent::tearDown(); // TODO: Change the autogenerated stub

		m::close();
	}

	public function test_logged_out_user_no_rules() {

		$customer = null;
		$post     = new WP_Post( new stdClass() );

		$factory = $this->getMock( 'IT_Exchange_Membership_Rule_Factory' );
		$factory->method( 'make_all_for_post' )->willReturn( array() );

		$repository = $this->getMock( 'IT_Exchange_User_Membership_Repository' );
		$repository->method( 'get_user_memberships' )->willReturn( array() );

		$evaluator = new IT_Exchange_Membership_Rule_Evaluator_Service( $factory, $repository );
		$this->assertEquals( array(), $evaluator->evaluate_content( $post ) );
	}

	public function test_logged_out_user_with_rules() {

		$customer = null;
		$post     = new WP_Post( new stdClass() );

		$rule = $this->get_mock_rule();

		$factory = $this->getMock( 'IT_Exchange_Membership_Rule_Factory' );
		$factory->method( 'make_all_for_post' )->willReturn( array( $rule ) );

		$repository = $this->getMock( 'IT_Exchange_User_Membership_Repository' );
		$repository->method( 'get_user_memberships' )->willReturn( array() );

		$evaluator = new IT_Exchange_Membership_Rule_Evaluator_Service( $factory, $repository );
		$this->assertEquals( array( $rule ), $evaluator->evaluate_content( $post, $customer ) );
	}

	public function test_logged_out_user_with_one_exempted_rule() {

		$customer = null;
		$post     = new WP_Post( new stdClass() );

		$rule = $this->get_mock_rule();
		$rule->method( 'is_post_exempt' )->with( $post )->willReturn( true );

		$factory = $this->getMock( 'IT_Exchange_Membership_Rule_Factory' );
		$factory->method( 'make_all_for_post' )->willReturn( array( $rule ) );

		$repository = $this->getMock( 'IT_Exchange_User_Membership_Repository' );
		$repository->method( 'get_user_memberships' )->willReturn( array() );

		$evaluator = new IT_Exchange_Membership_Rule_Evaluator_Service( $factory, $repository );
		$this->assertEquals( array(), $evaluator->evaluate_content( $post, $customer ) );
	}

	public function test_logged_out_user_with_multi_rules_one_exemption() {

		$customer = null;
		$post     = new WP_Post( new stdClass() );

		$rule = $this->get_mock_rule();
		$rule->method( 'is_post_exempt' )->with( $post )->willReturn( true );

		$rule2 = $this->get_mock_rule();
		$rule2->method( 'is_post_exempt' )->with( $post )->willReturn( false );

		$factory = $this->getMock( 'IT_Exchange_Membership_Rule_Factory' );
		$factory->method( 'make_all_for_post' )->willReturn( array( $rule, $rule2 ) );

		$repository = $this->getMock( 'IT_Exchange_User_Membership_Repository' );
		$repository->method( 'get_user_memberships' )->willReturn( array() );

		$evaluator = new IT_Exchange_Membership_Rule_Evaluator_Service( $factory, $repository );
		$this->assertEquals( array( $rule2 ), $evaluator->evaluate_content( $post, $customer ) );
	}

	public function test_logged_in_user_1_membership_matching_rule() {

		$customer = $this->getMockBuilder( 'IT_Exchange_Customer' )->disableOriginalConstructor()->getMock();
		$post     = new WP_Post( new stdClass() );

		$membership     = $this->getMockBuilder( 'IT_Exchange_Membership' )->disableOriginalConstructor()->getMock();
		$membership->ID = 1;

		$user_membership = $this->getMock( 'IT_Exchange_User_Membership' );
		$user_membership->method( 'get_membership' )->willReturn( $membership );

		$rule = $this->get_mock_rule();
		$rule->method( 'get_membership' )->willReturn( $membership );
		$rule->method( 'evaluate' )->willReturn( true );

		$factory = $this->getMock( 'IT_Exchange_Membership_Rule_Factory' );
		$factory->method( 'make_all_for_post' )->willReturn( array( $rule ) );

		$repository = $this->getMock( 'IT_Exchange_User_Membership_Repository' );
		$repository->method( 'get_user_memberships' )->willReturn( array( $user_membership ) );

		$evaluator = new IT_Exchange_Membership_Rule_Evaluator_Service( $factory, $repository );
		$this->assertEquals( array(), $evaluator->evaluate_content( $post, $customer ) );
	}

	public function test_logged_in_user_1_membership_non_matching_rule() {

		$customer = $this->getMockBuilder( 'IT_Exchange_Customer' )->disableOriginalConstructor()->getMock();
		$post     = new WP_Post( new stdClass() );

		$membership     = $this->getMockBuilder( 'IT_Exchange_Membership' )->disableOriginalConstructor()->getMock();
		$membership->ID = 1;

		$membership2     = $this->getMockBuilder( 'IT_Exchange_Membership' )->disableOriginalConstructor()->getMock();
		$membership2->ID = 2;

		$user_membership = $this->getMock( 'IT_Exchange_User_Membership' );
		$user_membership->method( 'get_membership' )->willReturn( $membership );

		$rule = $this->get_mock_rule();
		$rule->method( 'get_membership' )->willReturn( $membership2 );

		$factory = $this->getMock( 'IT_Exchange_Membership_Rule_Factory' );
		$factory->method( 'make_all_for_post' )->willReturn( array( $rule ) );

		$repository = $this->getMock( 'IT_Exchange_User_Membership_Repository' );
		$repository->method( 'get_user_memberships' )->willReturn( array( $user_membership ) );

		$evaluator = new IT_Exchange_Membership_Rule_Evaluator_Service( $factory, $repository );
		$this->assertEquals( array( $rule ), $evaluator->evaluate_content( $post, $customer ) );
	}

	public function test_logged_in_user_2_membership_matching_rule() {

		$customer = $this->getMockBuilder( 'IT_Exchange_Customer' )->disableOriginalConstructor()->getMock();
		$post     = new WP_Post( new stdClass() );

		$membership     = $this->getMockBuilder( 'IT_Exchange_Membership' )->disableOriginalConstructor()->getMock();
		$membership->ID = 1;

		$membership2     = $this->getMockBuilder( 'IT_Exchange_Membership' )->disableOriginalConstructor()->getMock();
		$membership2->ID = 2;

		$user_membership = $this->getMock( 'IT_Exchange_User_Membership' );
		$user_membership->method( 'get_membership' )->willReturn( $membership );

		$rule = $this->get_mock_rule();
		$rule->method( 'get_membership' )->willReturn( $membership );
		$rule->method( 'evaluate' )->willReturn( true );
		$rule2 = $this->get_mock_rule();
		$rule2->method( 'get_membership' )->willReturn( $membership2 );
		$rule2->method( 'evaluate' )->willReturn( true );

		$factory = $this->getMock( 'IT_Exchange_Membership_Rule_Factory' );
		$factory->method( 'make_all_for_post' )->willReturn( array( $rule, $rule2 ) );

		$repository = $this->getMock( 'IT_Exchange_User_Membership_Repository' );
		$repository->method( 'get_user_memberships' )->willReturn( array( $user_membership ) );

		$evaluator = new IT_Exchange_Membership_Rule_Evaluator_Service( $factory, $repository );
		$this->assertEquals( array(), $evaluator->evaluate_content( $post, $customer ) );
	}

	public function test_evaluate_drip_returns_null_if_no_delay_rules() {

		$customer = $this->getMockBuilder( 'IT_Exchange_Customer' )->disableOriginalConstructor()->getMock();
		$post     = new WP_Post( new stdClass() );

		$membership      = $this->getMockBuilder( 'IT_Exchange_Membership' )->disableOriginalConstructor()->getMock();
		$user_membership = $this->getMock( 'IT_Exchange_User_Membership' );
		$user_membership->method( 'get_membership' )->willReturn( $membership );

		$rule = $this->get_mock_rule();

		$factory = $this->getMock( 'IT_Exchange_Membership_Rule_Factory' );
		$factory->method( 'make_all_for_membership' )->with( $membership )->willReturn( array( $rule ) );

		$repository = $this->getMock( 'IT_Exchange_User_Membership_Repository' );
		$repository->method( 'get_user_memberships' )->with( $customer )->willReturn( array( $user_membership ) );

		$evaluator = new IT_Exchange_Membership_Rule_Evaluator_Service( $factory, $repository );
		$this->assertNull( $evaluator->evaluate_drip( $post, $customer ) );
	}

	public function test_evaluate_drip_returns_null_if_one_passed_evaluation() {

		$customer = $this->getMockBuilder( 'IT_Exchange_Customer' )->disableOriginalConstructor()->getMock();
		$post     = new WP_Post( new stdClass() );

		$membership      = $this->getMockBuilder( 'IT_Exchange_Membership' )->disableOriginalConstructor()->getMock();
		$user_membership = $this->getMock( 'IT_Exchange_User_Membership' );
		$user_membership->method( 'get_membership' )->willReturn( $membership );

		$delay1 = m::mock( 'IT_Exchange_Membership_Delay_Rule' );
		$delay1->shouldReceive( 'get_availability_date' )->zeroOrMoreTimes()->andReturn( new DateTime() );
		$delay1->shouldReceive( 'evaluate' )->zeroOrMoreTimes()->with( $user_membership, $post )->andReturn( false );

		$rule1 = m::mock( 'IT_Exchange_Membership_Rule_Delayable' );
		$rule1->shouldReceive( 'matches_post' )->andReturn( true );
		$rule1->shouldReceive( 'evaluate' )->andReturn( true );
		$rule1->shouldReceive( 'get_delay_rule' )->andReturn( $delay1 );

		$delay2 = m::mock( 'IT_Exchange_Membership_Delay_Rule' );
		$delay2->shouldReceive( 'get_availability_date' )->zeroOrMoreTimes()->andReturn( new DateTime() );
		$delay2->shouldReceive( 'evaluate' )->zeroOrMoreTimes()->with( $user_membership, $post )->andReturn( true );

		$rule2 = m::mock( 'IT_Exchange_Membership_Rule_Delayable' );
		$rule2->shouldReceive( 'matches_post' )->andReturn( true );
		$rule2->shouldReceive( 'evaluate' )->andReturn( true );
		$rule2->shouldReceive( 'get_delay_rule' )->andReturn( $delay2 );

		$factory = $this->getMock( 'IT_Exchange_Membership_Rule_Factory' );
		$factory->method( 'make_all_for_membership' )->with( $membership )->willReturn( array( $rule1, $rule2 ) );

		$repository = $this->getMock( 'IT_Exchange_User_Membership_Repository' );
		$repository->method( 'get_user_memberships' )->with( $customer )->willReturn( array( $user_membership ) );

		$evaluator = new IT_Exchange_Membership_Rule_Evaluator_Service( $factory, $repository );
		$this->assertNull( $evaluator->evaluate_drip( $post, $customer ) );
	}

	public function test_evaluate_drip_returns_earliest_available() {

		$customer = $this->getMockBuilder( 'IT_Exchange_Customer' )->disableOriginalConstructor()->getMock();
		$post     = new WP_Post( new stdClass() );

		$membership      = $this->getMockBuilder( 'IT_Exchange_Membership' )->disableOriginalConstructor()->getMock();
		$user_membership = $this->getMock( 'IT_Exchange_User_Membership' );
		$user_membership->method( 'get_membership' )->willReturn( $membership );

		$delay1 = m::mock( 'IT_Exchange_Membership_Delay_Rule' );
		$delay1->shouldReceive( 'get_availability_date' )->zeroOrMoreTimes()->andReturn( new DateTime( '+1 year' ) );
		$delay1->shouldReceive( 'evaluate' )->zeroOrMoreTimes()->with( $user_membership, $post )->andReturn( false );

		$rule1 = m::mock( 'IT_Exchange_Membership_Rule_Delayable' );
		$rule1->shouldReceive( 'matches_post' )->andReturn( true );
		$rule1->shouldReceive( 'evaluate' )->andReturn( true );
		$rule1->shouldReceive( 'get_delay_rule' )->andReturn( $delay1 );

		$delay2 = m::mock( 'IT_Exchange_Membership_Delay_Rule' );
		$delay2->shouldReceive( 'get_availability_date' )->zeroOrMoreTimes()->andReturn( new DateTime( '+1 month' ) );
		$delay2->shouldReceive( 'evaluate' )->zeroOrMoreTimes()->with( $user_membership, $post )->andReturn( false );

		$rule2 = m::mock( 'IT_Exchange_Membership_Rule_Delayable' );
		$rule2->shouldReceive( 'matches_post' )->andReturn( true );
		$rule2->shouldReceive( 'evaluate' )->andReturn( true );
		$rule2->shouldReceive( 'get_delay_rule' )->andReturn( $delay2 );

		$factory = $this->getMock( 'IT_Exchange_Membership_Rule_Factory' );
		$factory->method( 'make_all_for_membership' )->with( $membership )->willReturn( array( $rule1, $rule2 ) );

		$repository = $this->getMock( 'IT_Exchange_User_Membership_Repository' );
		$repository->method( 'get_user_memberships' )->with( $customer )->willReturn( array( $user_membership ) );

		$evaluator = new IT_Exchange_Membership_Rule_Evaluator_Service( $factory, $repository );
		$results   = $evaluator->evaluate_drip( $post, $customer );

		$this->assertArrayHasKey( 'rule', $results );
		$this->assertArrayHasKey( 'membership', $results );

		$this->assertEquals( $delay2, $results['rule'] );
		$this->assertEquals( $user_membership, $results['membership'] );
	}
}